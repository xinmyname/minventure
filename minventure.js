// Generated by CoffeeScript 1.6.2
(function() {
  var Buying, City, Encounter, Fighting, GameState, Location, Monster, Moving, PlayerState, Resting, Selling, Town, encounters, gameState, playerStates, setInterval, _ref, _ref1, _ref2, _ref3,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GameState = (function() {
    function GameState() {}

    GameState.prototype.time = 0;

    GameState.prototype.health = 0;

    GameState.prototype.maxHealth = 0;

    GameState.prototype.level = 0;

    GameState.prototype.experience = 0;

    GameState.prototype.money = 0;

    GameState.prototype.loot = 0;

    GameState.prototype.buy = 0;

    GameState.prototype.sell = 0;

    GameState.prototype.limit = 0;

    GameState.prototype.encounter = null;

    GameState.prototype.playerState = null;

    GameState.prototype.setHealth = function(value) {
      this.health = value;
      return $('#health').html(value);
    };

    GameState.prototype.setMaxHealth = function(value) {
      this.maxHealth = value;
      return $('#maxHealth').html(value);
    };

    GameState.prototype.setLevel = function(value) {
      this.level = value;
      return $('#level').html(value);
    };

    GameState.prototype.setExperience = function(value) {
      this.experience = value;
      return $('#experience').html(value);
    };

    GameState.prototype.setMoney = function(value) {
      this.money = value;
      return $('#money').html(value);
    };

    GameState.prototype.setLoot = function(value) {
      this.loot = value;
      return $('#loot').html(value);
    };

    GameState.prototype.setEncounter = function(value) {
      this.encounter = value;
      $('#encounter').removeClass();
      $('#encounter').addClass(value.id);
      return $('#description').html(value.name);
    };

    GameState.prototype.setPlayerState = function(value) {
      var $button, keyId, keyValue, _results;

      this.playerState = value;
      _results = [];
      for (keyId in playerStates) {
        keyValue = playerStates[keyId];
        $button = $('#' + keyId);
        $button.removeClass();
        if (keyId === value.id) {
          $button.addClass("selected");
          _results.push($button.html(keyValue.kinetic));
        } else {
          _results.push($button.html(keyValue.potential));
        }
      }
      return _results;
    };

    return GameState;

  })();

  Encounter = (function() {
    function Encounter(id, name) {
      this.id = id;
      this.name = name;
    }

    Encounter.prototype.setup = function() {};

    Encounter.prototype.action = function() {};

    Encounter.prototype.teardown = function() {};

    return Encounter;

  })();

  Location = (function(_super) {
    __extends(Location, _super);

    function Location() {
      _ref = Location.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Location;

  })(Encounter);

  Monster = (function(_super) {
    __extends(Monster, _super);

    function Monster() {
      _ref1 = Monster.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Monster;

  })(Encounter);

  City = (function(_super) {
    __extends(City, _super);

    function City() {
      _ref2 = City.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return City;

  })(Encounter);

  Town = (function(_super) {
    __extends(Town, _super);

    function Town() {
      _ref3 = Town.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return Town;

  })(Encounter);

  PlayerState = (function() {
    function PlayerState(id, potential, kinetic) {
      this.id = id;
      this.potential = potential;
      this.kinetic = kinetic;
    }

    PlayerState.prototype.setup = function() {};

    PlayerState.prototype.action = function() {};

    PlayerState.prototype.teardown = function() {};

    return PlayerState;

  })();

  Moving = (function(_super) {
    __extends(Moving, _super);

    function Moving() {
      Moving.__super__.constructor.call(this, "move", "Move!", "Moving!");
    }

    return Moving;

  })(PlayerState);

  Fighting = (function(_super) {
    __extends(Fighting, _super);

    function Fighting() {
      Fighting.__super__.constructor.call(this, "fight", "Fight!", "Fighting!");
    }

    return Fighting;

  })(PlayerState);

  Buying = (function(_super) {
    __extends(Buying, _super);

    function Buying() {
      Buying.__super__.constructor.call(this, "buy", "Buy!", "Buying!");
    }

    return Buying;

  })(PlayerState);

  Selling = (function(_super) {
    __extends(Selling, _super);

    function Selling() {
      Selling.__super__.constructor.call(this, "sell", "Sell!", "Selling!");
    }

    return Selling;

  })(PlayerState);

  Resting = (function(_super) {
    __extends(Resting, _super);

    function Resting() {
      Resting.__super__.constructor.call(this, "rest", "Rest!", "Resting!");
    }

    return Resting;

  })(PlayerState);

  encounters = {
    swamp: new Location("swamp", "Swamp!"),
    prarie: new Location("prarie", "Prarie!")
  };

  playerStates = {
    move: new Moving,
    fight: new Fighting,
    buy: new Buying,
    sell: new Selling,
    rest: new Resting
  };

  gameState = new GameState;

  gameState.setHealth(25);

  gameState.setMaxHealth(25);

  gameState.setLevel(1);

  gameState.setExperience(0);

  gameState.setMoney(0);

  gameState.setLoot(0);

  gameState.setEncounter(encounters.swamp);

  gameState.setPlayerState(playerStates.rest);

  setInterval = function(delay, exp) {
    return window.setInterval(exp, delay);
  };

  setInterval(1000, function() {});

  $('#move').click(function() {
    return gameState.setPlayerState(playerStates.move);
  });

  $('#fight').click(function() {
    return gameState.setPlayerState(playerStates.fight);
  });

  $('#buy').click(function() {
    return gameState.setPlayerState(playerStates.buy);
  });

  $('#sell').click(function() {
    return gameState.setPlayerState(playerStates.sell);
  });

  $('#rest').click(function() {
    return gameState.setPlayerState(playerStates.rest);
  });

}).call(this);

/*
//@ sourceMappingURL=minventure.map
*/
