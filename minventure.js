// Generated by CoffeeScript 1.6.2
(function() {
  var Buying, City, Encounter, Fighting, GameState, Location, Monster, Moving, PlayerState, Resting, Selling, Town, encounters, gameState, playerStates, _ref, _ref1, _ref2, _ref3, _ref4, _ref5, _ref6, _ref7, _ref8,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GameState = (function() {
    function GameState() {}

    GameState.prototype.time = 0;

    GameState.prototype.health = 25;

    GameState.prototype.maxHealth = 25;

    GameState.prototype.level = 1;

    GameState.prototype.experience = 0;

    GameState.prototype.money = 0;

    GameState.prototype.loot = 0;

    GameState.prototype.buy = 0;

    GameState.prototype.sell = 0;

    GameState.prototype.limit = 3;

    GameState.prototype.encounter = 'swamp';

    GameState.prototype.playerState = 'resting';

    return GameState;

  })();

  Encounter = (function() {
    function Encounter(name) {
      this.name = name;
    }

    Encounter.prototype.setup = function() {};

    Encounter.prototype.action = function() {};

    Encounter.prototype.teardown = function() {};

    return Encounter;

  })();

  Location = (function(_super) {
    __extends(Location, _super);

    function Location() {
      _ref = Location.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    return Location;

  })(Encounter);

  Monster = (function(_super) {
    __extends(Monster, _super);

    function Monster() {
      _ref1 = Monster.__super__.constructor.apply(this, arguments);
      return _ref1;
    }

    return Monster;

  })(Encounter);

  City = (function(_super) {
    __extends(City, _super);

    function City() {
      _ref2 = City.__super__.constructor.apply(this, arguments);
      return _ref2;
    }

    return City;

  })(Encounter);

  Town = (function(_super) {
    __extends(Town, _super);

    function Town() {
      _ref3 = Town.__super__.constructor.apply(this, arguments);
      return _ref3;
    }

    return Town;

  })(Encounter);

  PlayerState = (function() {
    function PlayerState(name) {
      this.name = name;
    }

    PlayerState.prototype.setup = function() {};

    PlayerState.prototype.action = function() {};

    PlayerState.prototype.teardown = function() {};

    return PlayerState;

  })();

  Moving = (function(_super) {
    __extends(Moving, _super);

    function Moving() {
      _ref4 = Moving.__super__.constructor.apply(this, arguments);
      return _ref4;
    }

    return Moving;

  })(PlayerState);

  Fighting = (function(_super) {
    __extends(Fighting, _super);

    function Fighting() {
      _ref5 = Fighting.__super__.constructor.apply(this, arguments);
      return _ref5;
    }

    return Fighting;

  })(PlayerState);

  Buying = (function(_super) {
    __extends(Buying, _super);

    function Buying() {
      _ref6 = Buying.__super__.constructor.apply(this, arguments);
      return _ref6;
    }

    return Buying;

  })(PlayerState);

  Selling = (function(_super) {
    __extends(Selling, _super);

    function Selling() {
      _ref7 = Selling.__super__.constructor.apply(this, arguments);
      return _ref7;
    }

    return Selling;

  })(PlayerState);

  Resting = (function(_super) {
    __extends(Resting, _super);

    function Resting() {
      _ref8 = Resting.__super__.constructor.apply(this, arguments);
      return _ref8;
    }

    Resting.prototype.action = function() {
      return console.log("Resting...");
    };

    return Resting;

  })(PlayerState);

  encounters = {
    swamp: new Location("Swamp!"),
    prarie: new Location("Prarie!")
  };

  playerStates = {
    moving: new Moving,
    fighting: new Fighting,
    buying: new Buying,
    selling: new Selling,
    resting: new Resting
  };

  gameState = new GameState;

}).call(this);

/*
//@ sourceMappingURL=minventure.map
*/
