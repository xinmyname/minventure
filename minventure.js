// Generated by CoffeeScript 1.6.2
(function() {
  var City, Encounter, Fighting, GameState, Location, Monster, Moving, PlayerState, Resting, Town, encounterChance, encounters, gameOver, gameState, moveToNextEncounter, playerStates, setInterval, timerId, _ref,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  GameState = (function() {
    function GameState() {}

    GameState.prototype.health = 0;

    GameState.prototype.level = 0;

    GameState.prototype.experience = 0;

    GameState.prototype.money = 0;

    GameState.prototype.limit = 0;

    GameState.prototype.encounter = null;

    GameState.prototype.playerState = null;

    GameState.prototype.setHealth = function(value) {
      this.health = value;
      return $('#health').html(value);
    };

    GameState.prototype.setLevel = function(value) {
      this.level = value;
      $('#level').html(value);
      this.maxHealth = Math.round(173.5 * Math.exp(0.0339 * value) - 147);
      return $('#maxHealth').html(this.maxHealth);
    };

    GameState.prototype.setExperience = function(value) {
      this.experience = value;
      return $('#experience').html(value);
    };

    GameState.prototype.setMoney = function(value) {
      this.money = value;
      return $('#money').html(value);
    };

    GameState.prototype.setLimit = function(value) {
      this.limit = value;
      return $('#limit').html(value);
    };

    GameState.prototype.setEncounter = function(value) {
      var _ref;

      if ((_ref = this.encounter) != null) {
        _ref.teardown();
      }
      this.encounter = value;
      return this.encounter.setup();
    };

    GameState.prototype.setPlayerState = function(value) {
      var _ref;

      if ((_ref = this.playerState) != null) {
        _ref.teardown();
      }
      this.playerState = value;
      return this.playerState.setup();
    };

    GameState.prototype.save = function() {
      var state, stateJson;

      state = {
        h: this.health,
        l: this.level,
        e: this.experience,
        m: this.money,
        li: this.limit,
        en: this.encounter.id,
        p: this.playerState.id
      };
      stateJson = JSON.stringify(state);
      return localStorage["minventure.state"] = stateJson;
    };

    GameState.prototype.load = function() {
      var state, stateJson;

      stateJson = localStorage["minventure.state"];
      state = JSON.parse(stateJson);
      this.setHealth(state.h);
      this.setLevel(state.l);
      this.setExperience(state.e);
      this.setMoney(state.m);
      this.setLimit(state.limit);
      this.setEncounter(encounters[state.en]);
      return this.setPlayerState(playerStates[state.p]);
    };

    return GameState;

  })();

  moveToNextEncounter = function() {
    var ec, next, nextEncounter, nextId, _i, _len;

    next = Math.random();
    for (_i = 0, _len = encounterChance.length; _i < _len; _i++) {
      ec = encounterChance[_i];
      if (next >= ec.value) {
        nextId = ec.id;
      } else {
        break;
      }
    }
    nextEncounter = encounters[nextId];
    return gameState.setEncounter(nextEncounter);
  };

  gameOver = function() {
    return console.log("GAME OVER!");
  };

  PlayerState = (function() {
    function PlayerState(id, potential, kinetic) {
      this.id = id;
      this.potential = potential;
      this.kinetic = kinetic;
    }

    PlayerState.prototype.action = function() {};

    PlayerState.prototype.setup = function() {
      var $button;

      $button = $('#' + this.id);
      $button.addClass("selected");
      return $button.html(this.kinetic);
    };

    PlayerState.prototype.teardown = function() {
      var $button;

      $button = $('#' + this.id);
      $button.removeClass();
      return $button.html(this.potential);
    };

    return PlayerState;

  })();

  Moving = (function(_super) {
    __extends(Moving, _super);

    function Moving() {
      Moving.__super__.constructor.call(this, "move", "Move!", "Moving!");
    }

    Moving.prototype.action = function() {
      if (gameState.encounter instanceof Monster) {
        if (Math.random < 0.10) {
          return moveToNextEncounter();
        }
      } else if (gameState.limit === 1) {
        return moveToNextEncounter();
      } else {
        return gameState.setLimit(gameState.limit - 1);
      }
    };

    return Moving;

  })(PlayerState);

  Fighting = (function(_super) {
    __extends(Fighting, _super);

    function Fighting() {
      Fighting.__super__.constructor.call(this, "fight", "Fight!", "Fighting!");
    }

    Fighting.prototype.action = function() {
      var damage, newLimit;

      if (gameState.encounter instanceof Monster) {
        damage = 10;
        newLimit = gameState.limit - damage;
        if (newLimit <= 0) {
          return this.monsterDefeated();
        } else {
          return gameState.setLimit(newLimit);
        }
      }
    };

    Fighting.prototype.monsterDefeated = function() {
      return moveToNextEncounter();
    };

    return Fighting;

  })(PlayerState);

  Resting = (function(_super) {
    __extends(Resting, _super);

    function Resting() {
      Resting.__super__.constructor.call(this, "rest", "Rest!", "Resting!");
    }

    Resting.prototype.action = function() {
      var addHealth, expMultiplier, lootMultiplier, newHealth;

      if (gameState.health < gameState.maxHealth) {
        expMultiplier = 1;
        lootMultiplier = 1;
        addHealth = expMultiplier * lootMultiplier;
        newHealth = gameState.health + addHealth;
        if (newHealth > gameState.maxHealth) {
          newHealth = gameState.maxHealth;
        }
        return gameState.setHealth(newHealth);
      }
    };

    return Resting;

  })(PlayerState);

  Encounter = (function() {
    function Encounter(id, name, minLimit, maxLimit) {
      this.id = id;
      this.name = name;
      this.minLimit = minLimit;
      this.maxLimit = maxLimit;
    }

    Encounter.prototype.setup = function() {
      $('#encounter').removeClass();
      $('#encounter').addClass(this.id);
      return $('#description').html(this.name);
    };

    Encounter.prototype.action = function() {};

    Encounter.prototype.teardown = function() {};

    Encounter.prototype.getMinLimit = function() {
      return this.minLimit;
    };

    Encounter.prototype.getMaxLimit = function() {
      return this.maxLimit;
    };

    Encounter.prototype.nextLimit = function() {
      var delta;

      delta = this.getMaxLimit() - this.getMinLimit();
      return Math.floor(Math.random() * delta) + this.getMinLimit();
    };

    return Encounter;

  })();

  Location = (function(_super) {
    __extends(Location, _super);

    function Location() {
      _ref = Location.__super__.constructor.apply(this, arguments);
      return _ref;
    }

    Location.prototype.setup = function() {
      Location.__super__.setup.apply(this, arguments);
      return gameState.setLimit(this.nextLimit());
    };

    return Location;

  })(Encounter);

  Monster = (function(_super) {
    __extends(Monster, _super);

    function Monster() {
      Monster.__super__.constructor.call(this, "monster", "Monster!", 0, 0);
    }

    Monster.prototype.setup = function() {
      Monster.__super__.setup.apply(this, arguments);
      return gameState.setLimit(this.nextLimit());
    };

    Monster.prototype.action = function() {
      var damage, newHealth;

      damage = 1;
      newHealth = gameState.health - damage;
      if (newHealth <= 0) {
        return gameOver();
      } else {
        return gameState.setHealth(newHealth);
      }
    };

    Monster.prototype.getMinLimit = function() {
      return 42;
    };

    Monster.prototype.getMaxLimit = function() {
      return 42;
    };

    return Monster;

  })(Encounter);

  City = (function(_super) {
    __extends(City, _super);

    function City() {
      City.__super__.constructor.call(this, "city", "City!", 4, 6);
    }

    return City;

  })(Encounter);

  Town = (function(_super) {
    __extends(Town, _super);

    function Town() {
      Town.__super__.constructor.call(this, "town", "Town!", 2, 4);
    }

    return Town;

  })(Encounter);

  encounters = {
    swamp: new Location("swamp", "Swamp!", 2, 8),
    prarie: new Location("prarie", "Prarie!", 2, 7),
    hills: new Location("hills", "Hills!", 2, 8),
    mountains: new Location("mountains", "Mountains!", 2, 5),
    desert: new Location("desert", "Desert!", 2, 8),
    coastline: new Location("coastline", "Coastline!", 2, 5),
    jungle: new Location("jungle", "Jungle!", 2, 8),
    ruins: new Location("ruins", "Ruins!", 2, 4),
    tundra: new Location("tundra", "Tundra!", 2, 6),
    forest: new Location("forest", "Forest!", 2, 8),
    savana: new Location("savana", "Savana!", 2, 8),
    town: new Town,
    city: new City,
    monster: new Monster
  };

  encounterChance = [
    {
      value: 0.00,
      id: "ruins"
    }, {
      value: 0.05,
      id: "city"
    }, {
      value: 0.10,
      id: "town"
    }, {
      value: 0.20,
      id: "swamp"
    }, {
      value: 0.25,
      id: "savana"
    }, {
      value: 0.30,
      id: "desert"
    }, {
      value: 0.35,
      id: "jungle"
    }, {
      value: 0.40,
      id: "forest"
    }, {
      value: 0.60,
      id: "hills"
    }, {
      value: 0.70,
      id: "prarie"
    }, {
      value: 0.75,
      id: "mountains"
    }, {
      value: 0.80,
      id: "tundra"
    }, {
      value: 0.85,
      id: "coastline"
    }, {
      value: 0.9,
      id: "monster"
    }
  ];

  playerStates = {
    move: new Moving,
    fight: new Fighting,
    rest: new Resting
  };

  gameState = new GameState;

  gameState.setLevel(1);

  gameState.setHealth(25);

  gameState.setExperience(0);

  gameState.setMoney(0);

  gameState.setEncounter(encounters.forest);

  gameState.setPlayerState(playerStates.rest);

  timerId = 0;

  setInterval = function(delay, exp) {
    return timerId = window.setInterval(exp, delay);
  };

  setInterval(1000, function() {
    gameState.playerState.action();
    return gameState.encounter.action();
  });

  $('#move').click(function() {
    return gameState.setPlayerState(playerStates.move);
  });

  $('#fight').click(function() {
    return gameState.setPlayerState(playerStates.fight);
  });

  $('#buy').click(function() {
    return gameState.setPlayerState(playerStates.buy);
  });

  $('#sell').click(function() {
    return gameState.setPlayerState(playerStates.sell);
  });

  $('#rest').click(function() {
    return gameState.setPlayerState(playerStates.rest);
  });

  $('#save').click(function() {
    return gameState.save();
  });

  $('#load').click(function() {
    return gameState.load();
  });

  $(document.documentElement).keypress(function(e) {
    if (e.keyCode === 109) {
      return gameState.setEncounter(encounters.monster);
    }
  });

}).call(this);

/*
//@ sourceMappingURL=minventure.map
*/
