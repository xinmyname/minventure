// Generated by CoffeeScript 1.6.2
(function() {
  var Fragment, ListFragment, LookupFragment, Loot, LootFactory, OptionalFragment, PluralFragment, SelectFragment, TextFragment, factory, list,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  Loot = (function() {
    function Loot(singular, plural, quantity) {
      this.singular = singular;
      this.plural = plural;
      this.quantity = quantity;
    }

    Loot.prototype.incrementQuantity = function() {
      return this.quantity = this.quantity + 1;
    };

    Loot.prototype.description = function() {
      if (this.quantity > 1) {
        return this.plural;
      } else {
        return this.singular;
      }
    };

    return Loot;

  })();

  Fragment = (function() {
    function Fragment(type) {
      this.type = type;
      this.parent = null;
      this.children = [];
      this.text = "";
    }

    Fragment.prototype.addChild = function(child) {
      child.parent = this;
      return this.children.push(child);
    };

    Fragment.prototype.addCharacter = function(ch) {
      return this.text = this.text.concat(ch);
    };

    Fragment.prototype.debug = function() {
      var child, p, s, _i, _len, _ref, _results;

      s = "";
      p = this.parent;
      while (p !== null) {
        s = s.concat("  ");
        p = p.parent;
      }
      console.log("" + s + this.type + ": " + this.text);
      _ref = this.children;
      _results = [];
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        child = _ref[_i];
        _results.push(child.debug());
      }
      return _results;
    };

    return Fragment;

  })();

  OptionalFragment = (function(_super) {
    __extends(OptionalFragment, _super);

    function OptionalFragment() {
      OptionalFragment.__super__.constructor.call(this, "Optional");
    }

    return OptionalFragment;

  })(Fragment);

  LookupFragment = (function(_super) {
    __extends(LookupFragment, _super);

    function LookupFragment() {
      LookupFragment.__super__.constructor.call(this, "Lookup");
    }

    return LookupFragment;

  })(Fragment);

  PluralFragment = (function(_super) {
    __extends(PluralFragment, _super);

    function PluralFragment() {
      PluralFragment.__super__.constructor.call(this, "Plural");
    }

    return PluralFragment;

  })(Fragment);

  TextFragment = (function(_super) {
    __extends(TextFragment, _super);

    function TextFragment() {
      TextFragment.__super__.constructor.call(this, "Text");
    }

    return TextFragment;

  })(Fragment);

  ListFragment = (function(_super) {
    __extends(ListFragment, _super);

    function ListFragment() {
      ListFragment.__super__.constructor.call(this, "List");
    }

    return ListFragment;

  })(Fragment);

  SelectFragment = (function(_super) {
    __extends(SelectFragment, _super);

    function SelectFragment() {
      SelectFragment.__super__.constructor.call(this, "Select");
    }

    /*
    
    
      new ListFragment
        new OptionalFragment
          new LookupFragment "Weight"
        new OptionalFragment
          new SelectFragment
            new LookupFragment "Race"
            new LookupFragment "Material"
        new SelectFragment
          new PluralFragment "Dagger"
          new PluralFragment "Knife"
          new PluralFragment "Axe"
          new PluralFragment "Short Sword"
          new PluralFragment "Broadsword"
    
    
      new ListFragment
        new PluralFragment "Scroll"
        new TextFragment "of"
        new LookupFragment "Characteristic"
    
      new ListFragment
        new TextFragment "Amulet"
        new TextFragment "of"
        new TextFragment "Yendor"
    */


    return SelectFragment;

  })(Fragment);

  LootFactory = (function() {
    var reText, _templates;

    function LootFactory() {}

    _templates = ["{Weight}? [{Race}|{Material}]? [Dagger$|Knife$|Axe$|'Short Sword'$|Broadsword$|'Long Sword'$|Katana$|Saber$|Club$|Mace$|'Morning Star'$|Flail$|Quarterstaff$|Polearm$|Spear$|Bow$|Crossbow$]", "{Aspect}? {Race}? {Mail} [Armor$|'Pair of Gauntlets'|Helm$|'Pair of Boots']", "{Aspect}? {Race}? {Material} Shield$", "{Color} Monster [Hide$|Fur$|Tusk$|Horns$|Teeth|Bones]", "{Weight}? {Metal} [Saw$|Axe$|Scissors|Hammer$|Wrench$|Pliers]", "Scroll$ of {Characteristic}", "{Metal} $Wand of {Characteristic}", "{Color} $Potion of {Characteristic}", "{Metal} $Amulet", "?{Metal} $Amulet of {Characteristic}", "{Gem} $Amulet", "{Gem} $Amulet of {Characteristic}", "Amulet of Yendor", "{Metal} $Ring", "?{Metal} $Ring of {Characteristic}", "{Gem} $Ring", "{Gem} $Ring of {Characteristic}", "?{Gem} Encrusted {Metal} $Ring", "?{Gem} Encrusted ?{Metal} $Ring of {Characteristic}", "?{Weight} {Metal} $Bracelet", "?{Weight} ?{Metal} $Bracelet of {Characteristic}", "?{Gem} Encrusted {Metal} $Bracelet", "?{Gem} Encrusted ?{Metal} $Bracelet of {Characteristic}", "?{Weight} {Metal} $Necklace", "?{Weight} ?{Metal} $Necklace of {Characteristic}", "?{Gem} Encrusted {Metal} $Necklace", "?{Gem} Encrusted ?{Metal} $Necklace of {Characteristic}", "{Material} $Rod", "{Material} $Staff", "{Gem} Encrusted {Material} $Rod", "{Gem} Encrusted {Material} $Staff", "?{Aspect} {Material} $Key", "?{Aspect} {Material} $Arrow", "?{Aspect} {Material} $Bolt", "{Size} ?{Aspect} {Color} $Gem", "{MetalElement} Ore", "?{Size} ?{Aspect} {Color} [$Shirt|Trousers|Shorts|Capris|$Skirt|$Robe|$Hood|Gloves|$Dress|$Jacket|$Vest|Pajamas|$Scarf|$Coat|$Cap|$Cape|$Mask|$Headband]", "?{Size} ?{Color} $Book of {Topic}", "?{Length} ?{Color} $Book of {Topic}", "?{Weight} ?{Color} $Book of {Topic}", "?{Aspect} {Material} [$Fork|$Spoon|$Knife]"];

    reText = /[A-Za-z0-9]/;

    LootFactory.prototype.create = function() {
      var fragmentList, plural, singular, template;

      template = _templates[Math.floor(Math.random() * _templates.length)];
      fragmentList = new FragmentList;
      this.parseFragment(fragmentList, template, 0);
      singular = fragmentList.render(false);
      plural = fragmentList.render(true);
      return new Loot(singular, plural, 1);
    };

    LootFactory.prototype.parseFragment = function(parent, template, p) {
      var c;

      while (p < template.length) {
        c = template.charAt(p);
        switch (c) {
          case '?':
            parent.addChild(new OptionalFragment());
            break;
          case '{':
            p = this.parseLookup(parent, template, p);
            break;
          case '[':
            p = this.parseSelect(parent, template, p);
            break;
          case '$':
            p = this.parsePlural(parent, template, p);
            break;
          case ' ':
            p = p + 1;
            break;
          default:
            p = this.parseText(parent, template, p);
        }
        p++;
      }
      return p;
    };

    LootFactory.prototype.parseLookup = function(parent, template, p) {
      var ch, fragment;

      fragment = new LookupFragment();
      p++;
      while (true) {
        ch = template.charAt(p);
        if (reText.exec(ch) === null) {
          break;
        }
        fragment.addCharacter(ch);
        p++;
      }
      parent.addChild(fragment);
      return ++p;
    };

    LootFactory.prototype.parseSelect = function(parent, template, p) {};

    LootFactory.prototype.parsePlural = function(parent, template, p) {
      var ch, fragment;

      fragment = new PluralFragment;
      p++;
      while (true) {
        ch = template.charAt(p);
        if (reText.exec(ch) === null) {
          break;
        }
        fragment.addCharacter(ch);
        p++;
      }
      parent.addChild(fragment);
      return p;
    };

    LootFactory.prototype.parseText = function(parent, template, p) {
      var ch, fragment;

      fragment = new TextFragment;
      while (true) {
        ch = template.charAt(p);
        if (reText.exec(ch) === null) {
          break;
        }
        fragment.addCharacter(ch);
        p++;
      }
      parent.addChild(fragment);
      return p;
    };

    return LootFactory;

  })();

  factory = new LootFactory();

  list = new ListFragment();

  factory.parseFragment(list, "?{Gem} Encrusted {Metal} $Ring", 0);

  list.debug();

}).call(this);

/*
//@ sourceMappingURL=lootfactory.map
*/
